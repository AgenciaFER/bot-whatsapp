const { generateResponse, transcribeAudio } = require('../services/openai');
const { sendMessage, downloadAudio, startTyping, stopTyping, calculateHumanTypingTime, getBotAdminId } = require('../services/whatsapp');
const { createEvent, listEventsByUserId, updateEvent, deleteEvent } = require('../services/googleCalendar');
const { handleAdminCommand, showMainMenu } = require('../services/adminCommandService');
const { processReminderConfirmation, hasPendingConfirmation } = require('../services/reminderService');
const {
  queueMessage,
  isUserTyping,
  calculateDelay,
  getQueuedMessages,
  clearUserTimer,
  updateTypingState,
  messageStates,
  setResponseState,
  getResponseState,
  clearResponseState,
  setInterventionPauseState, // Added
  getInterventionPauseState, // Added
  clearInterventionPauseState, // Added
  INTERVENTION_CONFIG, // Added
  getPeriodSpecificGreeting, // Added
  setUserGreetingState, // Added
  getUserGreetingState, // Added
  formatDateHumanReadable, // Added
  // Novas fun√ß√µes de agendamento flex√≠vel
  processFlexibleScheduleRequest,
  processFollowUpScheduleResponse,
  generateScarcityScheduleMessage,
  SCHEDULE_SUGGESTION_CONFIG
} = require('../utils/helpers');

// Novos sistemas para melhorar o bot
const { analyzeUserIntent, analyzeConfirmationWithAI, INTENTIONS } = require('../utils/intentAnalyzer');
const { 
  CONVERSATION_STATES, 
  getConversationState, 
  updateConversationState,
  shouldResetConversation,
  resetConversation,
  processStateTransition
} = require('../utils/conversationFlow');
const { generateContextualResponse } = require('../utils/contextualResponses');
const { calculateTypingTime } = require('../utils/humanBehaviorSimulator');
const { extractDateFromMessage } = require('../utils/helpers');
const fs = require('fs');

// Simple delay function
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Armazenamento de conversas (in-memory para simplificar)
const conversations = new Map();

// NEW: Test number configuration state
let officialTestNumber = null; // Stores the official test number once confirmed
let potentialTestNumber = null; // Stores the senderId of the first user to message
let awaitingInitialConfirmation = false; // Flag to indicate if we're waiting for "ok" from potentialTestNumber

/**
 * Processa m√∫ltiplas mensagens como uma √∫nica entrada
 * @param {Array} messages - Array de mensagens do usu√°rio
 * @param {string} senderId - ID do remetente
 */
async function processMessageBatch(messages, senderId) {
  try {
    // Combina todas as mensagens em um √∫nico texto
    const combinedText = messages
      .map(msg => msg.content)
      .join('\n');

    console.log(`Processando lote de mensagens de ${senderId}:`, combinedText);
    
    // Analisa a inten√ß√£o do usu√°rio antes do processamento completo
    const userIntent = analyzeUserIntent(combinedText);
    
    // Se for uma inten√ß√£o de "resposta r√°pida" (como sauda√ß√£o ou confirma√ß√£o simples),
    // podemos responder imediatamente sem passar pelo processo completo de IA
    if (userIntent.confidence > 0.9 && 
        [INTENTIONS.GREETING, INTENTIONS.FAREWELL, 
         INTENTIONS.THANKS, INTENTIONS.CONFIRMATION,
         INTENTIONS.REJECTION].includes(userIntent.mainIntent)) {
      
      // Obter estado atual da conversa
      const conversationState = getConversationState(senderId);
      
      // Verificar se a inten√ß√£o de confirma√ß√£o/rejei√ß√£o corresponde a um estado esperado
      if ((userIntent.mainIntent === INTENTIONS.CONFIRMATION || 
           userIntent.mainIntent === INTENTIONS.REJECTION) && 
          conversationState.currentState.includes('CONFIRMING_')) {
        
        // Processar usando o fluxo normal para tratamento da confirma√ß√£o
        await handleSingleMessage(combinedText, senderId, messages[0].messageObj);
        return;
      }
      
      // Verificar se √© uma inten√ß√£o de LIST com alta confian√ßa
      if (userIntent.mainIntent === INTENTIONS.LIST && userIntent.confidence >= 0.85) {
        // Processa diretamente com o handler normal que vai tratar consultas de agendamento
        await handleSingleMessage(combinedText, senderId, messages[0].messageObj);
        return;
      }
      
      // Para outras inten√ß√µes de resposta r√°pida, podemos gerar uma resposta contextual
      // Kilo Code: Modified to exclude GREETING from quick contextual responses,
      // so it goes to full processing as per user request.
      if ([INTENTIONS.FAREWELL, INTENTIONS.THANKS].includes(userIntent.mainIntent)) {
        // Gerar resposta contextualizada
        const contextualResponse = generateContextualResponse(conversationState, userIntent);
        
        // Atualizar estado da conversa
        if (userIntent.mainIntent === INTENTIONS.GREETING) {
          updateConversationState(senderId, CONVERSATION_STATES.GREETING);
          // Marca que j√° enviou uma sauda√ß√£o hoje para evitar duplica√ß√£o
          setUserGreetingState(senderId, {
            greetingText: getPeriodSpecificGreeting(),
            timestamp: Date.now()
          });
        } else if (userIntent.mainIntent === INTENTIONS.FAREWELL) {
          updateConversationState(senderId, CONVERSATION_STATES.FAREWELL);
        }
        
        // Simular tempo de digita√ß√£o humano
        const { calculateTypingTime } = require('../utils/humanBehaviorSimulator');
        const typingTime = calculateTypingTime(contextualResponse);
        
        await startTyping(senderId);
        await new Promise(resolve => setTimeout(resolve, typingTime));
        await sendMessage(senderId, contextualResponse);
        await stopTyping(senderId);
        
        return;
      }
    }

    // Para outras inten√ß√µes mais complexas, processa o lote completo
    await handleSingleMessage(combinedText, senderId, messages[0].messageObj);
  } catch (error) {
    console.error('Erro ao processar lote de mensagens:', error);
    await sendMessage(senderId, 'Desculpe, ocorreu um erro ao processar suas mensagens.');
  }
}

/**
 * Processa uma √∫nica mensagem ap√≥s o delay
 */
async function handleSingleMessage(messageText, senderId, originalMessage) {
  const startTime = Date.now();
  console.log(`[Message] Iniciando processamento para ${senderId}: "${messageText.substring(0, 100)}..."`);
  
  try {
    // Recupera ou cria o hist√≥rico da conversa
    if (!conversations.has(senderId)) {
      conversations.set(senderId, [
        {
          role: 'system',
          content: `Voc√™ √© um assistente de agendamento fotogr√°fico alegre e gentil. Responda perguntas de forma clara, educada e humanizada, sempre com um tom positivo e acolhedor.

üéØ AGENDAMENTOS FLEX√çVEIS (NOVO SISTEMA):
Se o usu√°rio perguntar sobre disponibilidade de forma gen√©rica (ex: "tem hor√°rio amanh√£?", "quais hor√°rios livres hoje?", "tem vaga na ter√ßa?"), use a tag <AGENDAMENTO_FLEXIVEL> seguida da data/per√≠odo mencionado. Exemplo: <AGENDAMENTO_FLEXIVEL> amanh√£ manh√£ ou <AGENDAMENTO_FLEXIVEL> ter√ßa-feira tarde. O sistema ir√° verificar a agenda e sugerir hor√°rios com t√©cnicas de escassez.

Se o usu√°rio fornecer detalhes espec√≠ficos de agendamento (data e hora espec√≠ficas), inclua a tag <AGENDAMENTO_SOLICITADO> seguida pelos detalhes. Exemplo: <AGENDAMENTO_SOLICITADO> Ensaio Fotogr√°fico para 2025-05-28 √†s 14:30.

üîÑ FOLLOW-UP INTELIGENTE:
Se o usu√°rio responder com feedback sobre hor√°rios sugeridos (ex: "muito cedo", "muito tarde", "tem outra op√ß√£o?"), use a tag <AGENDAMENTO_FOLLOWUP> seguida do √∫ltimo hor√°rio sugerido e da data. Exemplo: <AGENDAMENTO_FOLLOWUP> 09:00 2025-05-27 muito cedo. O sistema ir√° sugerir alternativas mais adequadas.

üîÑ MODIFICA√á√ïES, CANCELAMENTOS E CONSULTAS:
Para altera√ß√µes: <AGENDAMENTO_MODIFICAR> Antigo: [data] √†s [hora] Novo: [data] √†s [hora]
Para cancelamentos: <AGENDAMENTO_CANCELAR> [data] √†s [hora]  
Para listar agendamentos: <AGENDAMENTO_LISTAR>

IMPORTANTE: Sempre use a tag <AGENDAMENTO_LISTAR> quando o usu√°rio quiser saber seus agendamentos existentes. Exemplos:
- "Quero saber que dia marquei meu ensaio"
- "Quando √© minha sess√£o de fotos?" 
- "Em que data est√° marcado meu ensaio?"
- "Qual dia agendei minha sess√£o?"

üí° DIRETRIZES DE COMUNICA√á√ÉO:
- Seja sempre gentil, alegre e use emojis com modera√ß√£o
- Use t√©cnicas de escassez natural ("acabou de vagar", "√∫ltimo hor√°rio", "est√° saindo r√°pido")
- Priorize manh√£s (9h, 10h, 11h) e tardes (14h, 15h, 16h, 17h)
- Nunca revele informa√ß√µes sobre lota√ß√£o geral da agenda
- Mantenha respostas concisas e conversacionais
- Se n√£o entender algo, pe√ßa esclarecimento de forma simp√°tica

Data atual para refer√™ncia: 26 de maio de 2025 (segunda-feira)`
        }
      ]);
    }

    const history = conversations.get(senderId);
    
    // Limita o hist√≥rico
    if (history.length > 10) {
      const systemMessage = history[0];
      const recentMessages = history.slice(-9); // Pega as √∫ltimas 9 mensagens de usu√°rio/assistente
      history.length = 0;
      history.push(systemMessage, ...recentMessages);
    }

    // Adiciona a mensagem ao hist√≥rico
    history.push({ role: 'user', content: messageText });          // Verifica se deve resetar a conversa por inatividade
    if (shouldResetConversation(senderId)) {
      console.log(`[Conversa] Resetando conversa para ${senderId} devido ao tempo de inatividade`);
      resetConversation(senderId);
    }
    
    // Analisa a inten√ß√£o do usu√°rio
    const userIntent = analyzeUserIntent(messageText);
    console.log(`[Inten√ß√£o] Detectada: ${userIntent.mainIntent || 'indeterminada'} (confian√ßa: ${userIntent.confidence})`);
    
    // Handle LIST intent directly with high confidence
    if (userIntent.mainIntent === INTENTIONS.LIST && userIntent.confidence >= 0.9) {
      console.log(`[Agendamento] Detectado pedido direto de listagem com alta confian√ßa para ${senderId}`);
      try {
        // Adiciona hist√≥rico para contexto
        history.push({
          role: 'system',
          content: 'Usu√°rio solicitou listagem de seus agendamentos.'
        });
        
        const now = new Date();
        const timeMin = now.toISOString();
        const timeMaxDate = new Date();
        timeMaxDate.setDate(now.getDate() + 90);
        const timeMax = timeMaxDate.toISOString();

        console.log(`[Agendamento] Listando agendamentos para ${senderId} de ${timeMin} at√© ${timeMax}`);
        const userEvents = await listEventsByUserId(senderId, timeMin, timeMax);

        if (userEvents && userEvents.length > 0) {
          let responseMessage = "üóìÔ∏è Seus pr√≥ximos agendamentos s√£o:\n";
          userEvents.forEach(event => {
            const eventStartDate = new Date(event.start.dateTime || event.start.date);
            const formattedDate = eventStartDate.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric' });
            const formattedTime = eventStartDate.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit', timeZone: 'America/Sao_Paulo' });
            responseMessage += `- ${formattedDate} √†s ${formattedTime}: ${event.summary}\n`;
          });
          
          // Simular tempo de digita√ß√£o humano
          const typingTime = calculateTypingTime(responseMessage);
          await startTyping(senderId);
          await new Promise(resolve => setTimeout(resolve, typingTime));
          await sendMessage(senderId, responseMessage);
          await stopTyping(senderId);
          
          // Adicionar resposta ao hist√≥rico
          history.push({
            role: 'assistant',
            content: responseMessage
          });
          
          return; // Interrompe o processamento para n√£o enviar para o modelo OpenAI
        } else {
          // Se n√£o encontrar eventos, responde diretamente
          const noEventsMessage = "üìÖ N√£o encontrei nenhum agendamento futuro para voc√™. Gostaria de marcar um novo hor√°rio?";
          
          const typingTime = calculateTypingTime(noEventsMessage);
          await startTyping(senderId);
          await new Promise(resolve => setTimeout(resolve, typingTime));
          await sendMessage(senderId, noEventsMessage);
          await stopTyping(senderId);
          
          // Adicionar resposta ao hist√≥rico
          history.push({
            role: 'assistant',
            content: noEventsMessage
          });
          
          return; // Interrompe o processamento para n√£o enviar para o modelo OpenAI
        }
      } catch (error) {
        console.error(`[Agendamento] Erro ao listar eventos diretamente para ${senderId}:`, error);
        // Continua fluxo normal em caso de erro
      }
    }
    
    // Verifica se h√° confirma√ß√£o de lembrete pendente
    if (hasPendingConfirmation(senderId)) {
      console.log(`[Reminder] Usu√°rio ${senderId} tem confirma√ß√£o pendente`);
      
      // Se for uma confirma√ß√£o clara, processa
      if ((userIntent.mainIntent === INTENTIONS.CONFIRMATION || userIntent.mainIntent === INTENTIONS.REJECTION) 
          && userIntent.confidence >= 0.8) {
        const processed = await checkAndProcessReminderConfirmation(senderId, messageText, userIntent);
        if (processed) {
          return; // Confirma√ß√£o de lembrete processada
        }
      }
      
      // Se n√£o for confirma√ß√£o, mas √© uma mensagem relacionada a agendamento,
      // processa normalmente mas adiciona contexto sobre o lembrete pendente
      if (userIntent.mainIntent === INTENTIONS.SCHEDULE || 
          userIntent.mainIntent === INTENTIONS.RESCHEDULE || 
          userIntent.mainIntent === INTENTIONS.CANCEL) {
        history.push({
          role: 'system',
          content: 'Nota: Este usu√°rio tem um lembrete de agendamento pendente de confirma√ß√£o. Seja natural na conversa mas pode mencionar isso se for relevante.'
        });
      }
    }
    
    // Verifica contexto de data antes de gerar resposta
    let userDateIntent = null;
    try {
      userDateIntent = extractDateFromMessage(messageText);
      console.log(`[Data] An√°lise de data para mensagem: "${messageText.substring(0, 50)}..." => `, userDateIntent);
    } catch (error) {
      console.error(`[Data] Erro ao analisar data da mensagem: ${error.message}`);
      // Continue processing even if date extraction fails
    }
    
    // Processa o estado da conversa
    const currentConversationState = getConversationState(senderId);
    
    // Atualiza o contexto com informa√ß√µes de data, se dispon√≠veis
    if (userDateIntent && userDateIntent.date && userDateIntent.reference) {
      console.log(`[Contexto] Usu√°rio mencionou data: ${userDateIntent.date} (${userDateIntent.reference})`);
      
      // Atualizar o contexto da conversa
      updateConversationState(senderId, currentConversationState.currentState, {
        mentionedDate: userDateIntent.date,
        dateReference: userDateIntent.reference
      });
      
      // N√£o modificamos a mensagem original, apenas adicionamos contexto para o assistant
      history.push({ 
        role: 'system', 
        content: `Nota: O usu√°rio acabou de mencionar ${userDateIntent.reference} (${userDateIntent.date}). Use esta data para entender o contexto da conversa.`
      });
    }
    
    // Avaliar transi√ß√£o de estado com base na inten√ß√£o
    const stateTransition = processStateTransition(senderId, userIntent, messageText);
    
    // Atualizar o estado se necess√°rio
    if (stateTransition.suggestedNextState !== currentConversationState.currentState) {
      updateConversationState(senderId, stateTransition.suggestedNextState);
      
      // Informar a IA sobre mudan√ßa de estado (para contexto)
      history.push({
        role: 'system',
        content: `Estado da conversa atualizado para: ${stateTransition.suggestedNextState}`
      });
    }
    
    // Adicionar contexto de inten√ß√£o para a IA
    if (userIntent.mainIntent) {
      history.push({
        role: 'system',
        content: `Inten√ß√£o do usu√°rio identificada: ${userIntent.mainIntent}`
      });
    }
    
    // Gera resposta usando OpenAI com timeout
    console.log(`[OpenAI] Solicitando resposta para ${senderId}...`);
    const aiResponsePromise = generateResponse(messageText, history);
    const timeoutPromise = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Timeout na gera√ß√£o de resposta')), 30000) // 30 segundos timeout
    );
    
    const aiResponse = await Promise.race([aiResponsePromise, timeoutPromise]);
    console.log(`[OpenAI] Resposta recebida para ${senderId}: ${aiResponse.substring(0, 100)}...`);
    
    history.push({ role: 'assistant', content: aiResponse });

    // Verifica se a IA solicitou uma a√ß√£o de agendamento
    if (aiResponse.includes('<AGENDAMENTO_SOLICITADO>')) {
      console.log(`[Agendamento] IA detectou solicita√ß√£o de agendamento: ${aiResponse}`);
      
      const dateRegex = /(\d{4}-\d{2}-\d{2})/;
      const timeRegex = /(\d{2}:\d{2})/;
      
      let extractedDate = null;
      let extractedTime = null;

      // An√°lise contextual do texto original para extrair a data que o usu√°rio mencionou
      const userDateIntent = extractDateFromMessage(messageText);
      
      // Tenta extrair data e hora de formatos mais gen√©ricos primeiro
      const genericDateTimeRegex = /(\d{4}-\d{2}-\d{2})\s*(?:√†s|as|@)?\s*(\d{2}:\d{2})/;
      const genericMatch = aiResponse.match(genericDateTimeRegex);
      if (genericMatch) {
        extractedDate = genericMatch[1];
        extractedTime = genericMatch[2];
      } else {
        // Tenta extrair de "Data: YYYY-MM-DD Hora: HH:MM"
        const specificDateMatch = aiResponse.match(/Data:\s*(\d{4}-\d{2}-\d{2})/);
        if (specificDateMatch && specificDateMatch[1]) {
          extractedDate = specificDateMatch[1];
        }
        const specificTimeMatch = aiResponse.match(/Hora:\s*(\d{2}:\d{2})/);
        if (specificTimeMatch && specificTimeMatch[1]) {
          extractedTime = specificTimeMatch[1];
        }
      }
      
      // Se o usu√°rio especificou claramente uma data e a IA extraiu outra, usamos a data do usu√°rio
      if (userDateIntent.date && extractedDate && userDateIntent.date !== extractedDate) {
        console.log(`[Agendamento] Substituindo data detectada pela IA (${extractedDate}) pela data mencionada pelo usu√°rio (${userDateIntent.date})`);
        extractedDate = userDateIntent.date;
        console.log(`[Agendamento] Data referenciada pelo usu√°rio como: ${userDateIntent.reference || 'data espec√≠fica'}`);
      } else if (userDateIntent.date && !extractedDate) {
        console.log(`[Agendamento] IA n√£o detectou data, mas o usu√°rio mencionou (${userDateIntent.date})`);
        extractedDate = userDateIntent.date;
      }
      
      if (extractedDate && extractedTime) {
        const startDateTime = `${extractedDate}T${extractedTime}:00-03:00`; // Assumindo GMT-3 (Bras√≠lia)
        const startDateObj = new Date(startDateTime);
        const endDateObj = new Date(startDateObj.getTime() + 60 * 60 * 1000); // Adiciona 1 hora
        const endDateTime = `${endDateObj.getFullYear()}-${String(endDateObj.getMonth() + 1).padStart(2, '0')}-${String(endDateObj.getDate()).padStart(2, '0')}T${String(endDateObj.getHours()).padStart(2, '0')}:${String(endDateObj.getMinutes()).padStart(2, '0')}:00-03:00`;

        try {
          // Verificar eventos existentes para este usu√°rio no dia solicitado
          const dayStart = `${extractedDate}T00:00:00-03:00`;
          const dayEnd = `${extractedDate}T23:59:59-03:00`;
          
          console.log(`[Agendamento] Verificando eventos existentes para ${senderId} em ${extractedDate}`);
          const existingEvents = await listEventsByUserId(senderId, dayStart, dayEnd);

          if (existingEvents && existingEvents.length > 0) {
            const humanReadableDate = formatDateHumanReadable(extractedDate);
            let conflictMessage = `‚ö†Ô∏è Vi aqui que voc√™ j√° tem compromisso(s) marcado(s) para ${humanReadableDate}:\n`;
            existingEvents.forEach(event => {
              const eventStartTime = new Date(event.start.dateTime).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit', timeZone: 'America/Sao_Paulo' });
              conflictMessage += `- ${event.summary} √†s ${eventStartTime}\n`;
            });
            conflictMessage += `\nQuer adicionar mais este hor√°rio √†s ${extractedTime} mesmo assim, ou prefere reagendar algum dos existentes? Se quiser reagendar, pode me dizer algo como "quero mudar meu hor√°rio das [hora existente] para ${extractedTime}".`;
            
            await sendMessage(senderId, conflictMessage);
            // N√£o prossegue com a cria√ß√£o autom√°tica para evitar duplicidade sem confirma√ß√£o expl√≠cita.
            // A IA foi instru√≠da a n√£o lidar com conflitos diretamente.
            clearResponseState(senderId); // Limpa para permitir nova intera√ß√£o do usu√°rio
            return;
          }

          // Se n√£o h√° conflitos, prepara para confirma√ß√£o
          const eventDetails = {
            summary: 'Ensaio Fotogr√°fico (Agendado pelo Bot)',
            description: `Agendamento solicitado por ${senderId} (${originalMessage.sender ? originalMessage.sender.pushname : 'Nome n√£o dispon√≠vel'}). Detalhes fornecidos: ${messageText}`,
            startDateTime: startDateTime,
            endDateTime: endDateTime,
            timeZone: 'America/Sao_Paulo',
            userId: senderId,
            extractedDate: extractedDate, // Guardar para a mensagem de confirma√ß√£o
            extractedTime: extractedTime  // Guardar para a mensagem de confirma√ß√£o
          };

          const humanReadableDate = formatDateHumanReadable(extractedDate);
          
          // Importa o simulador de comportamento humano
          const { simulateTypingError } = require('../utils/humanBehaviorSimulator');
          
          // Personaliza a confirma√ß√£o caso tenha usado a data mencionada pelo usu√°rio
          let confirmationMessage;
          const confirmationTemplates = [
            `Perfeito! Posso agendar seu ensaio fotogr√°fico para ${humanReadableDate} √†s ${extractedTime}. Funciona para voc√™?`,
            `√ìtimo! Tenho um hor√°rio dispon√≠vel ${humanReadableDate} √†s ${extractedTime}. Gostaria de confirmar?`,
            `${humanReadableDate} √†s ${extractedTime} seria um excelente hor√°rio para seu ensaio! Confirma?`,
            `Que bom! Consigo encaixar voc√™ ${humanReadableDate} √†s ${extractedTime}. Esse hor√°rio √© bom para voc√™?`,
            `Excelente escolha! Posso reservar ${humanReadableDate} √†s ${extractedTime} para seu ensaio. Fechamos assim?`
          ];
          
          if (userDateIntent.date && userDateIntent.date === extractedDate && userDateIntent.reference) {
            // Se o usu√°rio mencionou uma data espec√≠fica, personaliza ainda mais
            const referenceTemplates = [
              `Perfeito! Para ${userDateIntent.reference}, posso agendar seu ensaio fotogr√°fico para ${humanReadableDate} √†s ${extractedTime}. Isso funciona para voc√™?`,
              `√ìtimo! Tenho um hor√°rio exatamente para ${userDateIntent.reference} √†s ${extractedTime}. Devo reservar para voc√™?`,
              `${userDateIntent.reference} √†s ${extractedTime} seria perfeito para seu ensaio! Confirma?`
            ];
            
            confirmationMessage = referenceTemplates[Math.floor(Math.random() * referenceTemplates.length)];
          } else {
            confirmationMessage = confirmationTemplates[Math.floor(Math.random() * confirmationTemplates.length)];
          }
          
          // Ocasionalmente simula um erro de digita√ß√£o para parecer mais humano (5% de chance)
          const errorSimulation = simulateTypingError(confirmationMessage);
          if (errorSimulation.hasError) {
            // Primeiro envia a mensagem com erro
            await sendMessage(senderId, errorSimulation.errorMessage);
            
            // Em seguida envia a corre√ß√£o
            await sendMessage(senderId, "*" + errorSimulation.correctedMessage + "");
            
            // Define a mensagem corrigida como a confirma√ß√£o final
            confirmationMessage = errorSimulation.correctedMessage;
          }
          
          const newResponseState = {
            isWaitingForConfirmation: true, // Flag geral de espera
            confirmationType: 'schedule_create', // Tipo espec√≠fico de confirma√ß√£o
            eventDetails: eventDetails, // Detalhes para usar ap√≥s confirma√ß√£o
            fullResponse: confirmationMessage, // A pergunta de confirma√ß√£o √© a "resposta" atual
            sentParts: [confirmationMessage], // J√° consideramos enviada
            remainingParts: [],
            currentPartIndex: 1,
            isPaused: false,
            lastInteraction: Date.now()
          };
          setResponseState(senderId, newResponseState);
          await sendMessage(senderId, confirmationMessage);
          // N√£o limpa o responseState aqui, aguarda a resposta do usu√°rio
          return;

        } catch (error) {
          console.error('[Agendamento] Erro durante o processo de agendamento:', error);
          const humanReadableDate = formatDateHumanReadable(extractedDate);
          await sendMessage(senderId, `Ops! Tive um probleminha t√©cnico ao tentar agendar para ${humanReadableDate} √†s ${extractedTime}. üòÖ Pode tentar de novo com um outro hor√°rio? Ou se preferir, me diga "quero falar com uma pessoa" para ajuda personalizada.`);
        }
      } else {
        console.log(`[Agendamento] Tag <AGENDAMENTO_SOLICITADO> encontrada, mas n√£o foi poss√≠vel extrair data e hora da resposta: ${aiResponse}`);
        const cleanedAiResponse = aiResponse.replace(/<AGENDAMENTO_SOLICITADO>/gi, '').trim();
        // Envia a resposta da IA sem a tag para evitar loop, se houver conte√∫do.
        if (cleanedAiResponse) {
            const parts = splitMessage(cleanedAiResponse);
            if (parts.length > 0) {
                const newResponseState = {
                    fullResponse: cleanedAiResponse,
                    sentParts: [],
                    remainingParts: [...parts],
                    currentPartIndex: 0,
                    isPaused: false,
                    lastInteraction: Date.now(),
                    isWaitingForConfirmation: false,
                    confirmationType: null,
                    eventDetails: null
                };
                setResponseState(senderId, newResponseState);
                await sendNextMessagePart(senderId);
            }
        } else {
            // Se a resposta era S√ì a tag e n√£o extraiu, envia uma mensagem mais natural.
            await sendMessage(senderId, "Quero te ajudar com esse agendamento, mas n√£o consegui entender exatamente qual data e hor√°rio voc√™ prefere. Pode me dizer novamente quando gostaria de agendar seu ensaio? Por exemplo, 'quero marcar para dia 27 √†s 15h'.");
            clearResponseState(senderId);
        }
        return;
      }
    } else if (aiResponse.includes('<AGENDAMENTO_MODIFICAR>')) {
      console.log(`[Agendamento] IA detectou solicita√ß√£o de MODIFICA√á√ÉO de agendamento: ${aiResponse}`);
      const modifyRegex = /<AGENDAMENTO_MODIFICAR>\s*Antigo:\s*(\d{4}-\d{2}-\d{2})\s*(?:√†s|as|@)?\s*(\d{2}:\d{2})\s*Novo:\s*(\d{4}-\d{2}-\d{2})\s*(?:√†s|as|@)?\s*(\d{2}:\d{2})/;
      const modifyMatch = aiResponse.match(modifyRegex);
      
      // An√°lise contextual do texto original para extrair a data que o usu√°rio mencionou
      const userDateIntent = extractDateFromMessage(messageText);

      if (modifyMatch) {
        let [, oldDate, oldTime, newDate, newTime] = modifyMatch;
        
        // Se o usu√°rio especificou claramente uma data no contexto, considere usar essa data para o novo agendamento
        if (userDateIntent.date) {
          console.log(`[Agendamento] Usu√°rio mencionou especificamente a data: ${userDateIntent.date}. Comparando com datas extra√≠das pela IA: Antiga=${oldDate}, Nova=${newDate}`);
          
          // Se a nova data √© diferente da mencionada pelo usu√°rio, usamos a data do usu√°rio
          if (userDateIntent.date !== newDate) {
            console.log(`[Agendamento] Substituindo nova data detectada pela IA (${newDate}) pela data mencionada pelo usu√°rio (${userDateIntent.date})`);
            newDate = userDateIntent.date;
          }
        }
        
        console.log(`[Agendamento] Solicita√ß√£o para modificar agendamento para ${senderId}: de ${oldDate} ${oldTime} para ${newDate} ${newTime}`);
        await sendMessage(senderId, `Ok, voc√™ quer remarcar de ${oldDate} √†s ${oldTime} para ${newDate} √†s ${newTime}. Vou verificar a disponibilidade um momento... ‚è≥`);

        try {
          const oldSearchDateStart = `${oldDate}T00:00:00-03:00`;
          const oldSearchDateEnd = `${oldDate}T23:59:59-03:00`;
          const userEventsOnOldDate = await listEventsByUserId(senderId, oldSearchDateStart, oldSearchDateEnd);

          let eventToModify = null;
          if (userEventsOnOldDate && userEventsOnOldDate.length > 0) {
            const oldTargetDateTime = new Date(`${oldDate}T${oldTime}:00-03:00`);
            eventToModify = userEventsOnOldDate.find(event => {
              const eventStartDateTime = new Date(event.start.dateTime);
              return eventStartDateTime.getTime() === oldTargetDateTime.getTime();
            });
          }

          if (!eventToModify) {
            await sendMessage(senderId, `Hmm, n√£o estou conseguindo encontrar seu agendamento de ${formatDateHumanReadable(oldDate)} √†s ${oldTime}. Voc√™ pode conferir a data e hor√°rio novamente? Se preferir, me pe√ßa para "listar meus agendamentos" e te mostrarei tudo que est√° marcado.`);
            clearResponseState(senderId);
            return;
          }

          const newStartDateTime = `${newDate}T${newTime}:00-03:00`;
          const newStartDateObj = new Date(newStartDateTime);
          const originalDuration = new Date(eventToModify.end.dateTime).getTime() - new Date(eventToModify.start.dateTime).getTime();
          const newEndDateObj = new Date(newStartDateObj.getTime() + originalDuration);
          const newEndDateTime = `${newEndDateObj.getFullYear()}-${String(newEndDateObj.getMonth() + 1).padStart(2, '0')}-${String(newEndDateObj.getDate()).padStart(2, '0')}T${String(newEndDateObj.getHours()).padStart(2, '0')}:${String(newEndDateObj.getMinutes()).padStart(2, '0')}:00-03:00`;

          // Verificar conflito no NOVO hor√°rio
          // Idealmente, verificar√≠amos a disponibilidade geral do calend√°rio, n√£o apenas os eventos do usu√°rio.
          // Por agora, a l√≥gica de conflito existente para o usu√°rio ser√° adaptada.
          const newDayStart = `${newDate}T00:00:00-03:00`;
          const newDayEnd = `${newDate}T23:59:59-03:00`;
          
          // Lista todos os eventos no novo dia para checar disponibilidade geral (simulado, pois listEventsByUserId √© por user)
          // Para uma checagem real de disponibilidade geral, precisar√≠amos de uma fun√ß√£o listAllEventsInRange(timeMin, timeMax)
          // ou assumir que o AI j√° filtrou por hor√°rios potencialmente vagos.
          // Vamos focar no conflito do pr√≥prio usu√°rio por enquanto, como j√° estava.
          const existingEventsOnNewDate = await listEventsByUserId(senderId, newDayStart, newDayEnd);
          
          const conflictingEvent = existingEventsOnNewDate.find(event => {
              if (event.id === eventToModify.id) return false;
              const eventStart = new Date(event.start.dateTime).getTime();
              const eventEnd = new Date(event.end.dateTime).getTime();
              const newEventStart = newStartDateObj.getTime();
              const newEventEnd = newEndDateObj.getTime();
              return (newEventStart < eventEnd && newEventEnd > eventStart);
          });

          if (conflictingEvent) {
              const conflictingStartTime = new Date(conflictingEvent.start.dateTime).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
              // Sugerir hor√°rio alternativo (simplificado: 1h depois, se n√£o, 1h antes)
              // Esta parte precisaria de l√≥gica mais robusta para encontrar hor√°rios realmente livres.
              const suggestedNewTimeLater = new Date(newStartDateObj.getTime() + 60 * 60 * 1000);
              const suggestedNewTimeEarlier = new Date(newStartDateObj.getTime() - 60 * 60 * 1000);
              // (Aqui precisaria verificar a disponibilidade desses hor√°rios sugeridos)

              await sendMessage(senderId, `‚ö†Ô∏è Opa! Parece que voc√™ j√° tem um compromisso (${conflictingEvent.summary} √†s ${conflictingStartTime}) nesse hor√°rio de ${newDate} √†s ${newTime}. Mas temos alternativas! O que acha de remarcar para ${String(suggestedNewTimeLater.getHours()).padStart(2, '0')}:${String(suggestedNewTimeLater.getMinutes()).padStart(2, '0')} ou talvez ${String(suggestedNewTimeEarlier.getHours()).padStart(2, '0')}:${String(suggestedNewTimeEarlier.getMinutes()).padStart(2, '0')} no mesmo dia? Ou me diga outro hor√°rio que funcione melhor para voc√™.`);
              clearResponseState(senderId);
              return;
          }
          
          // Se dispon√≠vel, pedir confirma√ß√£o
          const modificationDetails = {
            eventId: eventToModify.id,
            updatedEventData: {
              start: { dateTime: newStartDateTime, timeZone: 'America/Sao_Paulo' },
              end: { dateTime: newEndDateTime, timeZone: 'America/Sao_Paulo' },
            },
            oldDate: oldDate,
            oldTime: oldTime,
            newDate: newDate,
            newTime: newTime
          };
          
          const humanReadableOldDate = formatDateHumanReadable(oldDate);
          const humanReadableNewDate = formatDateHumanReadable(newDate);
          const confirmationMessage = `Perfeito! Ent√£o vamos mudar seu ensaio de ${humanReadableOldDate} √†s ${oldTime} para ${humanReadableNewDate} √†s ${newTime}. Confirma essa altera√ß√£o?`;

          const newResponseState = {
            isWaitingForConfirmation: true,
            confirmationType: 'schedule_modify',
            eventDetails: modificationDetails, // Usando eventDetails para armazenar os dados da modifica√ß√£o
            fullResponse: confirmationMessage,
            sentParts: [confirmationMessage],
            remainingParts: [],
            currentPartIndex: 1,
            isPaused: false,
            lastInteraction: Date.now()
          };
          setResponseState(senderId, newResponseState);
          await sendMessage(senderId, confirmationMessage);
          return;

        } catch (error) {
          console.error(`[Agendamento] Erro ao processar modifica√ß√£o para ${senderId}:`, error);
          await sendMessage(senderId, `üò• Desculpe, ocorreu um erro ao tentar verificar a disponibilidade para sua remarca√ß√£o. Por favor, tente novamente.`);
          clearResponseState(senderId);
        }
      } else {
        await sendMessage(senderId, "Desculpe, n√£o consegui entender completamente qual agendamento voc√™ deseja alterar. Poderia me dizer de uma forma mais clara? Por exemplo: 'quero mudar meu hor√°rio do dia 26 √†s 14h para o dia 27 √†s 15h'. Assim posso te ajudar melhor!");
        clearResponseState(senderId);
      }
      return;

    } else if (aiResponse.includes('<AGENDAMENTO_CANCELAR>')) {
      console.log(`[Agendamento] IA detectou solicita√ß√£o de CANCELAMENTO de agendamento: ${aiResponse}`);
      const cancelRegex = /<AGENDAMENTO_CANCELAR>\s*(\d{4}-\d{2}-\d{2})\s*(?:√†s|as|@)?\s*(\d{2}:\d{2})/;
      const cancelMatch = aiResponse.match(cancelRegex);

      // An√°lise contextual do texto original para extrair a data (caso a IA tenha interpretado incorretamente)
      const userDateIntent = extractDateFromMessage(messageText);
      
      if (cancelMatch) {
        let cancelDate = cancelMatch[1];
        const cancelTime = cancelMatch[2];
        
        // Se o usu√°rio especificou claramente uma data e a IA extraiu outra, usamos a data do usu√°rio
        if (userDateIntent.date && userDateIntent.day) {
          cancelDate = userDateIntent.date;
          console.log(`[Agendamento] Substituindo data detectada pela IA (${cancelMatch[1]}) pela data mencionada pelo usu√°rio (${cancelDate})`);
        }
        
        console.log(`[Agendamento] Solicita√ß√£o para cancelar agendamento para ${senderId}: ${cancelDate} √†s ${cancelTime}`);

        try {
          const searchDateStart = `${cancelDate}T00:00:00-03:00`;
          const searchDateEnd = `${cancelDate}T23:59:59-03:00`;
          const userEventsOnDate = await listEventsByUserId(senderId, searchDateStart, searchDateEnd);

          let eventToCancel = null;
          if (userEventsOnDate && userEventsOnDate.length > 0) {
            const targetDateTime = new Date(`${cancelDate}T${cancelTime}:00-03:00`);
            eventToCancel = userEventsOnDate.find(event => {
              const eventStartDateTime = new Date(event.start.dateTime);
              return eventStartDateTime.getTime() === targetDateTime.getTime();
            });
          }

          if (!eventToCancel) {
            const humanReadableNotFoundDate = formatDateHumanReadable(cancelDate);
            await sendMessage(senderId, `Estranho, n√£o encontrei nenhum agendamento seu para ${humanReadableNotFoundDate} √†s ${cancelTime}. Pode verificar se a data e hor√°rio est√£o corretos? Posso listar todos os seus agendamentos se me pedir "quais s√£o meus hor√°rios" ou "listar meus agendamentos".`);
            clearResponseState(senderId);
            return;
          }

          // Pedir confirma√ß√£o antes de cancelar
          const cancellationDetails = {
            eventId: eventToCancel.id,
            cancelDate: cancelDate,
            cancelTime: cancelTime,
            summary: eventToCancel.summary // Para usar na mensagem de confirma√ß√£o se necess√°rio
          };
          
          const humanReadableDate = formatDateHumanReadable(cancelDate);
          const confirmationMessage = `Entendi! Voc√™ quer cancelar seu agendamento de ${humanReadableDate} √†s ${cancelTime}. Posso fazer isso para voc√™, s√≥ preciso que confirme antes.`;

          const newResponseState = {
            isWaitingForConfirmation: true,
            confirmationType: 'schedule_cancel',
            eventDetails: cancellationDetails,
            fullResponse: confirmationMessage,
            sentParts: [confirmationMessage],
            remainingParts: [],
            currentPartIndex: 1,
            isPaused: false,
            lastInteraction: Date.now()
          };
          setResponseState(senderId, newResponseState);
          await sendMessage(senderId, confirmationMessage);
          return;

        } catch (error) {
          console.error(`[Agendamento] Erro ao processar cancelamento para ${senderId}:`, error);
          await sendMessage(senderId, `üò• Desculpe, ocorreu um erro ao tentar processar seu pedido de cancelamento. Por favor, tente novamente.`);
          clearResponseState(senderId);
        }
      } else {
        await sendMessage(senderId, "Estou quase entendendo, mas n√£o consegui identificar qual agendamento voc√™ quer cancelar. Poderia me dizer algo como 'quero cancelar meu agendamento do dia 27 √†s 15h'? Ou se preferir, posso listar todos os seus agendamentos ativos.");
        clearResponseState(senderId);
      }
      return;
    } else if (aiResponse.includes('<AGENDAMENTO_LISTAR>')) {
      console.log(`[Agendamento] IA detectou solicita√ß√£o de LISTAGEM de agendamentos: ${aiResponse}`);
      try {
        // Extrair data espec√≠fica da mensagem do usu√°rio se houver
        const userDateIntent = extractDateFromMessage(messageText);
        
        let timeMin, timeMax;
        
        if (userDateIntent.date) {
          // Se o usu√°rio menciona uma data espec√≠fica, busca eventos daquele dia
          console.log(`[Agendamento] Usu√°rio mencionou data espec√≠fica: ${userDateIntent.date} (${userDateIntent.reference})`);
          const specificDate = new Date(userDateIntent.date);
          
          // Define o in√≠cio do dia
          specificDate.setHours(0, 0, 0, 0);
          timeMin = specificDate.toISOString();
          
          // Define o fim do dia
          const endOfDay = new Date(specificDate);
          endOfDay.setHours(23, 59, 59, 999);
          timeMax = endOfDay.toISOString();
          
          console.log(`[Agendamento] Buscando eventos para ${userDateIntent.reference}: de ${timeMin} at√© ${timeMax}`);
        } else {
          // Caso contr√°rio, busca eventos futuros (pr√≥ximos 90 dias)
          const now = new Date();
          timeMin = now.toISOString();
          const timeMaxDate = new Date();
          timeMaxDate.setDate(now.getDate() + 90);
          timeMax = timeMaxDate.toISOString();
          console.log(`[Agendamento] Listando agendamentos futuros para ${senderId}: de ${timeMin} at√© ${timeMax}`);
        }

        try {
          const userEvents = await listEventsByUserId(senderId, timeMin, timeMax);
          
          if (userEvents && userEvents.length > 0) {
            let responseMessage = "üóìÔ∏è Seus agendamentos ";
            
            if (userDateIntent.date) {
              const readableDate = new Date(userDateIntent.date).toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric' });
              responseMessage += `para ${readableDate}`;
            } else {
              responseMessage += "agendados";
            }
            
            responseMessage += " s√£o:\n";
            
            userEvents.forEach(event => {
              const eventStartDate = new Date(event.start.dateTime || event.start.date);
              const formattedDate = eventStartDate.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric' });
              const formattedTime = eventStartDate.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit', timeZone: 'America/Sao_Paulo' });
              responseMessage += `- ${formattedDate} √†s ${formattedTime}: ${event.summary || 'Agendamento'}\n`;
            });
            
            // Simular tempo de digita√ß√£o humano
            const typingTime = calculateTypingTime(responseMessage);
            await startTyping(senderId);
            await new Promise(resolve => setTimeout(resolve, typingTime));
            await sendMessage(senderId, responseMessage);
            await stopTyping(senderId);
          } else {
            let noEventsMessage;
            
            if (userDateIntent.date) {
              const readableDate = new Date(userDateIntent.date).toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric' });
              noEventsMessage = `N√£o encontrei nenhum agendamento para ${readableDate}. Quer aproveitar para marcar um ensaio fotogr√°fico? Temos hor√°rios dispon√≠veis! üì∏‚ú®`;
            } else {
              noEventsMessage = "Parece que voc√™ n√£o tem nenhum agendamento pendente comigo. Que tal aproveitar e marcar um ensaio agora? Temos algumas datas dispon√≠veis! üì∏‚ú®";
            }
            
            const typingTime = calculateTypingTime(noEventsMessage);
            await startTyping(senderId);
            await new Promise(resolve => setTimeout(resolve, typingTime));
            await sendMessage(senderId, noEventsMessage);
            await stopTyping(senderId);
          }
        } catch (error) {
          console.error(`[Agendamento] Erro ao obter eventos do calend√°rio:`, error);
          throw new Error('Erro na API do Google Calendar: ' + error.message);
        }
      } catch (error) {
        console.error(`[Agendamento] Erro ao listar eventos para ${senderId}:`, error);
        let errorMessage = "üò• Desculpe, ocorreu um erro ao buscar seus agendamentos.";
        
        if (error.message.includes('extractDateFromMessage')) {
          errorMessage = "üò• Desculpe, n√£o consegui entender qual data voc√™ est√° procurando. Pode informar de outra forma?";
        } else if (error.message.includes('Google Calendar')) {
          errorMessage = "üòì Estamos com um problema t√©cnico para acessar a agenda. Por favor, tente novamente em alguns minutos.";
        }
        
        await sendMessage(senderId, errorMessage);
      }
      clearResponseState(senderId);
      return;
    } else if (aiResponse.includes('<AGENDAMENTO_FLEXIVEL>')) {
      console.log(`[Agendamento Flex√≠vel] IA detectou consulta de disponibilidade: ${aiResponse}`);
      
      try {
        // Processa a solicita√ß√£o flex√≠vel usando a nova fun√ß√£o
        const scheduleResult = await processFlexibleScheduleRequest(aiResponse, senderId);
        
        if (scheduleResult.success) {
          // Gera mensagem com t√©cnicas de escassez
          const scarcityMessage = generateScarcityScheduleMessage(
            scheduleResult.suggestions,
            scheduleResult.requestType,
            scheduleResult.targetDate
          );
          
          // Remove a tag da resposta original e combina com a mensagem de escassez
          const cleanedAiResponse = aiResponse.replace(/<AGENDAMENTO_FLEXIVEL>/gi, '').trim();
          
          let finalMessage;
          if (cleanedAiResponse) {
            finalMessage = `${cleanedAiResponse}\n\n${scarcityMessage}`;
          } else {
            finalMessage = scarcityMessage;
          }
          
          console.log(`[Agendamento Flex√≠vel] Enviando sugest√µes para ${senderId}: ${scheduleResult.suggestions.length} op√ß√µes`);
          
          // Divide a mensagem em partes se necess√°rio
          const parts = splitMessage(finalMessage);
          if (parts.length > 0) {
            const newResponseState = {
              fullResponse: finalMessage,
              sentParts: [],
              remainingParts: [...parts],
              currentPartIndex: 0,
              isPaused: false,
              lastInteraction: Date.now(),
              isWaitingForConfirmation: false,
              confirmationType: null,
              eventDetails: null
            };
            setResponseState(senderId, newResponseState);
            await sendNextMessagePart(senderId);
          }
        } else {
          // Em caso de erro, envia a resposta original limpa
          const cleanedAiResponse = aiResponse.replace(/<AGENDAMENTO_FLEXIVEL>/gi, '').trim();
          const fallbackMessage = cleanedAiResponse || 
            "üòä Gostaria de agendar um hor√°rio? Me fale qual per√≠odo voc√™ prefere (manh√£, tarde, ou uma data espec√≠fica) e eu vou sugerir as melhores op√ß√µes!";
          
          const parts = splitMessage(fallbackMessage);
          if (parts.length > 0) {
            const newResponseState = {
              fullResponse: fallbackMessage,
              sentParts: [],
              remainingParts: [...parts],
              currentPartIndex: 0,
              isPaused: false,
              lastInteraction: Date.now(),
              isWaitingForConfirmation: false,
              confirmationType: null,
              eventDetails: null
            };
            setResponseState(senderId, newResponseState);
            await sendNextMessagePart(senderId);
          }
        }
      } catch (error) {
        console.error('[Agendamento Flex√≠vel] Erro durante processamento:', error);
        
        // Em caso de erro, remove a tag e envia resposta normal
        const cleanedAiResponse = aiResponse.replace(/<AGENDAMENTO_FLEXIVEL>/gi, '').trim();
        const errorMessage = cleanedAiResponse || 
          "üòä Desculpe, houve um probleminha ao verificar os hor√°rios dispon√≠veis. Que tal me falar diretamente qual data e hor√°rio voc√™ prefere?";
        
        const parts = splitMessage(errorMessage);
        if (parts.length > 0) {
          const newResponseState = {
            fullResponse: errorMessage,
            sentParts: [],
            remainingParts: [...parts],
            currentPartIndex: 0,
            isPaused: false,
            lastInteraction: Date.now(),
            isWaitingForConfirmation: false,
            confirmationType: null,
            eventDetails: null
          };
          setResponseState(senderId, newResponseState);
          await sendNextMessagePart(senderId);
        }
      }
      return;
    } else if (aiResponse.includes('<AGENDAMENTO_FOLLOWUP>')) {
      console.log(`[Agendamento Follow-up] IA detectou resposta de feedback: ${aiResponse}`);
      
      try {
        // Extrai informa√ß√µes do follow-up
        const followupRegex = /<AGENDAMENTO_FOLLOWUP>\s*(\d{2}:\d{2})\s*(\d{4}-\d{2}-\d{2})\s*(.*)/;
        const followupMatch = aiResponse.match(followupRegex);
        
        if (followupMatch) {
          const [, lastSuggestedTime, targetDate, userFeedback] = followupMatch;
          
          console.log(`[Follow-up] Processando feedback para tempo ${lastSuggestedTime} em ${targetDate}: ${userFeedback}`);
          
          // Processa o feedback usando a nova fun√ß√£o
          const followupResult = await processFollowUpScheduleResponse(
            senderId, 
            userFeedback.trim(), 
            lastSuggestedTime, 
            targetDate
          );
          
          if (followupResult.success) {
            if (followupResult.hasAlternatives) {
              // Remove a tag da resposta original e combina com a nova sugest√£o
              const cleanedAiResponse = aiResponse.replace(/<AGENDAMENTO_FOLLOWUP>.*$/gi, '').trim();
              
              let finalMessage;
              if (cleanedAiResponse) {
                finalMessage = `${cleanedAiResponse}\n\n${followupResult.message}`;
              } else {
                finalMessage = followupResult.message;
              }
              
              console.log(`[Follow-up] Enviando ${followupResult.suggestions.length} alternativas para ${senderId}`);
              
              // Divide a mensagem em partes se necess√°rio
              const parts = splitMessage(finalMessage);
              if (parts.length > 0) {
                const newResponseState = {
                  fullResponse: finalMessage,
                  sentParts: [],
                  remainingParts: [...parts],
                  currentPartIndex: 0,
                  isPaused: false,
                  lastInteraction: Date.now(),
                  isWaitingForConfirmation: false,
                  confirmationType: null,
                  eventDetails: null
                };
                setResponseState(senderId, newResponseState);
                await sendNextMessagePart(senderId);
              }
            } else {
              // Sem alternativas - envia a mensagem sem op√ß√µes
              const cleanedAiResponse = aiResponse.replace(/<AGENDAMENTO_FOLLOWUP>.*$/gi, '').trim();
              const finalMessage = cleanedAiResponse ? 
                `${cleanedAiResponse}\n\n${followupResult.message}` : 
                followupResult.message;
              
              const parts = splitMessage(finalMessage);
              if (parts.length > 0) {
                const newResponseState = {
                  fullResponse: finalMessage,
                  sentParts: [],
                  remainingParts: [...parts],
                  currentPartIndex: 0,
                  isPaused: false,
                  lastInteraction: Date.now(),
                  isWaitingForConfirmation: false,
                  confirmationType: null,
                  eventDetails: null
                };
                setResponseState(senderId, newResponseState);
                await sendNextMessagePart(senderId);
              }
            }
          } else {
            // Em caso de erro no processamento do follow-up
            const cleanedAiResponse = aiResponse.replace(/<AGENDAMENTO_FOLLOWUP>.*$/gi, '').trim();
            const errorMessage = cleanedAiResponse || 
              "üòÖ Entendi seu feedback! Deixa eu verificar outras op√ß√µes dispon√≠veis pra voc√™...";
            
            const parts = splitMessage(errorMessage);
            if (parts.length > 0) {
              const newResponseState = {
                fullResponse: errorMessage,
                sentParts: [],
                remainingParts: [...parts],
                currentPartIndex: 0,
                isPaused: false,
                lastInteraction: Date.now(),
                isWaitingForConfirmation: false,
                confirmationType: null,
                eventDetails: null
              };
              setResponseState(senderId, newResponseState);
              await sendNextMessagePart(senderId);
            }
          }
        } else {
          // Se n√£o conseguiu extrair as informa√ß√µes do follow-up, processa como mensagem normal
          console.log(`[Follow-up] N√£o foi poss√≠vel extrair informa√ß√µes da tag AGENDAMENTO_FOLLOWUP: ${aiResponse}`);
          const cleanedAiResponse = aiResponse.replace(/<AGENDAMENTO_FOLLOWUP>/gi, '').trim();
          const fallbackMessage = cleanedAiResponse || 
            "üòä Entendi! Deixa eu ver outras op√ß√µes dispon√≠veis pra voc√™...";
          
          const parts = splitMessage(fallbackMessage);
          if (parts.length > 0) {
            const newResponseState = {
              fullResponse: fallbackMessage,
              sentParts: [],
              remainingParts: [...parts],
              currentPartIndex: 0,
              isPaused: false,
              lastInteraction: Date.now(),
              isWaitingForConfirmation: false,
              confirmationType: null,
              eventDetails: null
            };
            setResponseState(senderId, newResponseState);
            await sendNextMessagePart(senderId);
          }
        }
      } catch (error) {
        console.error('[Agendamento Follow-up] Erro durante processamento:', error);
        
        // Em caso de erro, remove a tag e envia resposta normal
        const cleanedAiResponse = aiResponse.replace(/<AGENDAMENTO_FOLLOWUP>.*$/gi, '').trim();
        const errorMessage = cleanedAiResponse || 
          "üòä Entendi seu feedback! Deixa eu verificar as op√ß√µes dispon√≠veis e j√° te dou uma resposta...";
        
        const parts = splitMessage(errorMessage);
        if (parts.length > 0) {
          const newResponseState = {
            fullResponse: errorMessage,
            sentParts: [],
            remainingParts: [...parts],
            currentPartIndex: 0,
            isPaused: false,
            lastInteraction: Date.now(),
            isWaitingForConfirmation: false,
            confirmationType: null,
            eventDetails: null
          };
          setResponseState(senderId, newResponseState);
          await sendNextMessagePart(senderId);
        }
      }
      return;
    }

    // Divide a resposta em partes menores (se n√£o for agendamento ou se agendamento falhou na extra√ß√£o)
    const parts = splitMessage(aiResponse);

    if (parts.length > 0) {
      const newResponseState = {
        fullResponse: aiResponse,
        sentParts: [],
        remainingParts: [...parts],
        currentPartIndex: 0,
        isPaused: false,
        lastInteraction: Date.now(),
        isWaitingForConfirmation: false
      };
      setResponseState(senderId, newResponseState);
      await sendNextMessagePart(senderId);
    }
    
    const processingTime = Date.now() - startTime;
    console.log(`[Message] Processamento conclu√≠do para ${senderId} em ${processingTime}ms`);
    
  } catch (error) {
    const processingTime = Date.now() - startTime;
    console.error(`[Message] Erro em handleSingleMessage para ${senderId} ap√≥s ${processingTime}ms:`, error);
    
    // Diferentes mensagens de erro dependendo do tipo de erro
    let errorMessage = 'Desculpe, ocorreu um erro ao processar sua mensagem.';
    
    if (error.message === 'Timeout na gera√ß√£o de resposta') {
      errorMessage = 'Desculpe, minha resposta est√° demorando mais que o esperado. Pode tentar novamente? ü§î';
    } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
      errorMessage = 'Parece que estou com problemas de conex√£o. Pode tentar novamente em alguns segundos? üì∂';
    } else if (error.message?.includes('rate limit') || error.message?.includes('quota')) {
      errorMessage = 'Estou um pouco sobrecarregado no momento. Pode aguardar um minutinho e tentar novamente? ‚è≥';
    }
    
    await sendMessage(senderId, errorMessage);
    clearResponseState(senderId);
  }
}

/**
 * Envia a pr√≥xima parte de uma resposta longa, gerenciando pausas e interrup√ß√µes.
 * @param {string} senderId - ID do remetente.
 */
async function sendNextMessagePart(senderId) {
  const responseState = getResponseState(senderId);

  if (!responseState || responseState.isPaused || responseState.remainingParts.length === 0) {
    if (responseState && responseState.remainingParts.length === 0 && !responseState.isWaitingForConfirmation) {
      console.log(`Resposta completa enviada para ${senderId}. Limpando estado.`);
      clearResponseState(senderId);
    }
    return;
  }

  // Verifica se houve interrup√ß√£o (nova mensagem do usu√°rio)
  // Consideramos uma interrup√ß√£o se uma nova mensagem foi enfileirada OU se o timestamp da √∫ltima mensagem √© mais recente
  const userQueue = messageStates.messageQueues.get(senderId);
  const lastUserMessageTime = messageStates.lastMessageTime.get(senderId);
  const hasNewerMessageInQueue = userQueue && userQueue.length > 0 && userQueue[userQueue.length -1].timestamp > responseState.lastInteraction;
  const hasRecentUnprocessedMessage = lastUserMessageTime && lastUserMessageTime > responseState.lastInteraction && (!userQueue || userQueue.length === 0);


  if ((hasNewerMessageInQueue || hasRecentUnprocessedMessage) && responseState.sentParts.length > 0) { // S√≥ pausa se j√° enviou algo
    console.log(`Interrup√ß√£o detectada para ${senderId}. Pausando resposta.`);
    responseState.isPaused = true;
    responseState.isWaitingForConfirmation = true;
    setResponseState(senderId, responseState);
    await sendMessage(senderId, "Voc√™ enviou uma nova mensagem enquanto eu respondia. Deseja que eu continue a resposta anterior? (Responda 'sim' para continuar ou 'n√£o' para parar).");
    return;
  }
  
  const part = responseState.remainingParts[0];
  const typingTime = calculateHumanTypingTime(part);

  try {
    await startTyping(senderId);
    await delay(typingTime);
    // await stopTyping(senderId); // Moved after sendMessage
    
    await sendMessage(senderId, part);
    await stopTyping(senderId); // Added here

    responseState.sentParts.push(part);
    responseState.remainingParts.shift(); // Remove a parte enviada
    responseState.currentPartIndex++;
    responseState.lastInteraction = Date.now();
    setResponseState(senderId, responseState);

    if (responseState.remainingParts.length > 0) {
      // Adiciona um pequeno delay entre as partes
      await delay(Math.random() * 1000 + 1500);
      sendNextMessagePart(senderId); // Chama recursivamente para a pr√≥xima parte
    } else {
      console.log(`Resposta completa enviada para ${senderId}. Limpando estado.`);
      clearResponseState(senderId);
    }
  } catch (error) {
    console.error(`Erro ao enviar parte da mensagem para ${senderId}:`, error);
    await sendMessage(senderId, "Ocorreu um erro ao tentar enviar uma parte da resposta. Por favor, tente novamente.");
    clearResponseState(senderId); // Limpa o estado para evitar loops de erro
  }
}


/**
 * Handler principal de mensagens com sistema de delay
 */
async function messageHandler(message, isAudio = false) {
  const senderId = message.from;

  try {
    // Get chat object and admin ID
    const chat = await message.getChat();
    const adminId = getBotAdminId();

    console.log(`üì® Processando mensagem de ${senderId}, Admin: ${adminId}`);
    console.log(`üìù Conte√∫do: "${message.body}"`);

    // Primeiro, sempre tenta processar como comando administrativo
    if (!isAudio && await handleAdminCommand(message)) {
      console.log(`‚úÖ [Admin] Comando administrativo processado com sucesso`);
      return;
    }

    // --- L√≥gica de Sauda√ß√£o ---
    // Analisa a inten√ß√£o do usu√°rio antes de decidir enviar sauda√ß√£o
    const userMessageBody = message.body ? message.body.toLowerCase().trim() : "";
    const userIntent = analyzeUserIntent(userMessageBody);
    
    // N√£o envia sauda√ß√£o autom√°tica se j√° detectamos uma inten√ß√£o clara
    let shouldSendGreeting = false;
    
    // S√≥ considera enviar sauda√ß√£o autom√°tica se:
    // 1. N√£o h√° inten√ß√£o clara OU 
    // 2. A inten√ß√£o √© uma sauda√ß√£o gen√©rica
    if (!userIntent.mainIntent || 
        (userIntent.mainIntent === INTENTIONS.GREETING && userIntent.confidence >= 0.9)) {
        
      const lastGreetingState = getUserGreetingState(senderId);
      const currentPeriodGreeting = getPeriodSpecificGreeting(); // Ex: "Bom dia"
      const todayDateString = new Date().toLocaleDateString('pt-BR');
      
      if (!lastGreetingState) {
        shouldSendGreeting = true;
      } else {
        const lastGreetingDateString = new Date(lastGreetingState.timestamp).toLocaleDateString('pt-BR');
        // Envia se for um novo dia OU se o per√≠odo mudou (ex: de manh√£ para tarde) no mesmo dia
        if (lastGreetingDateString !== todayDateString || lastGreetingState.greetingText !== currentPeriodGreeting) {
          shouldSendGreeting = true;
        }
      }
    }

    if (false) { // Greeting logic disabled by Kilo Code as per user request
      // Decide se √© uma mensagem gen√©rica para adequar a resposta
      const genericGreetings = ["oi", "ola", "ol√°", "bom dia", "boa tarde", "boa noite", "e ai", "tudo bem", "tudo bem?"];
      const isGenericUserMessage = userMessageBody.length < 15 && genericGreetings.some(g => userMessageBody.startsWith(g));

      let greetingMessage = `${getPeriodSpecificGreeting()}! üëã`;
      if (isGenericUserMessage || userMessageBody.length === 0) { // Se for gen√©rico ou vazio (ex: s√≥ um √°udio inicial)
        greetingMessage += ` Como posso te ajudar hoje?`;
      }
      // Se a mensagem do usu√°rio j√° for mais espec√≠fica, a sauda√ß√£o ser√° mais curta,
      // e o bot processar√° a mensagem do usu√°rio em seguida.

      // Moved setUserGreetingState earlier and corrected typing indicator logic
      setUserGreetingState(senderId, {
        greetingText: getPeriodSpecificGreeting(),
        timestamp: Date.now()
      });

      // Simula tempo de digita√ß√£o humanizado para a sauda√ß√£o
      const greetingTypingTime = calculateTypingTime(greetingMessage);
      
      try {
        await startTyping(senderId);
        await delay(greetingTypingTime);
        await sendMessage(senderId, greetingMessage); // sendMessage before stopTyping
        await stopTyping(senderId); // stopTyping after sendMessage
        
        // setUserGreetingState was already called
      } catch (error) {
        console.error(`Erro ao enviar sauda√ß√£o principal para ${senderId}:`, error);
        // Em caso de erro, tenta enviar a sauda√ß√£o novamente (pode ter falhado antes).
        // A mensagem original j√° foi constru√≠da.
        try {
          console.log(`Tentando enviar sauda√ß√£o de fallback para ${senderId} ap√≥s erro inicial.`);
          await sendMessage(senderId, greetingMessage);
          console.log(`Sauda√ß√£o de fallback enviada com sucesso para ${senderId}.`);
        } catch (fallbackError) {
          console.error(`Erro TAMB√âM ao enviar sauda√ß√£o de fallback para ${senderId}:`, fallbackError);
          // Mesmo que o fallback falhe, o erro original (primeiro 'error') j√° foi logado.
          // N√£o h√° muito mais a fazer aqui sen√£o garantir que este erro n√£o quebre o fluxo superior.
        }
        // setUserGreetingState was already called, no need to call it again here.
      }
    }
    // --- Fim da L√≥gica de Sauda√ß√£o ---

    // --- Impedir resposta em grupos ---
    if (chat && chat.isGroup) {
      console.log(`Mensagem recebida do grupo "${chat.name}" (${senderId}). Bot n√£o responder√° a grupos.`);
      return; // Ignora mensagens de grupo
    }

    // --- L√≥gica de Interven√ß√£o Humana ---
    const interventionState = getInterventionPauseState();

    if (adminId && senderId === adminId) {
      // Mensagem do Administrador - Comandos de pausa
      // Por enquanto, qualquer mensagem do admin ativa/estende a pausa.
      // Futuramente, pode-se usar comandos espec√≠ficos como "/pause", "/extendpause", "/unpause"
      
      let newPauseState = {};
      let adminMessage = "";

      if (!interventionState || !interventionState.isPaused || Date.now() >= interventionState.pausedUntil) {
        // Iniciar pausa
        newPauseState = {
          isPaused: true,
          pausedUntil: Date.now() + INTERVENTION_CONFIG.INITIAL_PAUSE_DURATION,
          pauseLevel: 1
        };
        adminMessage = `ü§ñ Bot pausado por interven√ß√£o. Pausa inicial de ${INTERVENTION_CONFIG.INITIAL_PAUSE_DURATION / (60 * 1000)} minutos.`;
      } else {
        // Estender pausa existente
        if (interventionState.pauseLevel === 1) {
          newPauseState = {
            isPaused: true,
            pausedUntil: Date.now() + INTERVENTION_CONFIG.EXTENSION_PAUSE_DURATION,
            pauseLevel: 2
          };
          adminMessage = `ü§ñ Pausa do bot estendida. Nova dura√ß√£o: ${INTERVENTION_CONFIG.EXTENSION_PAUSE_DURATION / (60 * 1000)} minutos.`;
        } else if (interventionState.pauseLevel === 2) {
          newPauseState = {
            isPaused: true,
            pausedUntil: Date.now() + INTERVENTION_CONFIG.MAX_PAUSE_DURATION,
            pauseLevel: 3
          };
          adminMessage = `ü§ñ Pausa do bot estendida para a dura√ß√£o m√°xima: ${INTERVENTION_CONFIG.MAX_PAUSE_DURATION / (60 * 1000)} minutos.`;
        } else { // pauseLevel >= 3
          adminMessage = `ü§ñ Bot j√° est√° na dura√ß√£o m√°xima de pausa (${(interventionState.pausedUntil - Date.now()) / (60*1000) > 0 ? ((interventionState.pausedUntil - Date.now()) / (60*1000)).toFixed(1) : 0 } min restantes).`;
          // N√£o altera o newPauseState, mant√©m o atual.
           setInterventionPauseState(interventionState); // Re-set para atualizar timestamp se necess√°rio, ou apenas para log
        }
      }
      
      if (newPauseState.isPaused) { // Apenas atualiza se um novo estado de pausa foi definido
        setInterventionPauseState(newPauseState);
      }
      console.log(adminMessage);
      await sendMessage(adminId, adminMessage);
      return; // Mensagem do admin para interven√ß√£o n√£o deve ser processada como query
    }

    // Verificar se o bot est√° em pausa global por interven√ß√£o
    if (interventionState && interventionState.isPaused && Date.now() < interventionState.pausedUntil) {
      console.log(`Bot em pausa por interven√ß√£o (at√© ${new Date(interventionState.pausedUntil).toLocaleTimeString()}). Mensagem de ${senderId} ignorada.`);
      // Opcional: Enviar mensagem ao usu√°rio informando da manuten√ß√£o
      // await sendMessage(senderId, "Desculpe, o assistente est√° temporariamente em manuten√ß√£o. Por favor, tente mais tarde.");
      return; // Ignora mensagens de outros usu√°rios durante a pausa de interven√ß√£o
    } else if (interventionState && interventionState.isPaused && Date.now() >= interventionState.pausedUntil) {
      // Pausa expirou
      console.log("Pausa de interven√ß√£o do bot expirou. Reativando...");
      clearInterventionPauseState();
      await sendMessage(adminId, "ü§ñ Pausa de interven√ß√£o expirou. Bot reativado.");
    }
    // --- Fim da L√≥gica de Interven√ß√£o Humana ---

    // Verifica se h√° uma resposta pausada aguardando confirma√ß√£o
    const currentResponseState = getResponseState(senderId);
    if (currentResponseState && currentResponseState.isWaitingForConfirmation && !isAudio) {
      // Analisa a inten√ß√£o da mensagem primeiro
      const userIntent = analyzeUserIntent(message.body);
      
      // Se for uma sauda√ß√£o simples, responde educadamente e mant√©m o estado de confirma√ß√£o
      if (userIntent.mainIntent === INTENTIONS.GREETING && userIntent.confidence > 0.9) {
        const greetingResponses = [
          "Oi! üòä Ainda estou aguardando sua confirma√ß√£o sobre o que conversamos antes...",
          "Ol√°! üëã Lembra que estava esperando sua resposta sobre aquele assunto?",
          "Oi! Que bom te ver de novo. Ainda preciso da sua confirma√ß√£o para continuar..."
        ];
        const greetingResponse = greetingResponses[Math.floor(Math.random() * greetingResponses.length)];
        await sendMessage(senderId, greetingResponse);
        return;
      }
      
      const userConfirmation = message.body.toLowerCase().trim();
      clearUserTimer(senderId);
      const processedConfirmationMessage = getQueuedMessages(senderId); // Limpa a mensagem de confirma√ß√£o da fila principal
      console.log(`[Confirmation] User ${senderId} responded: ${userConfirmation} to type: ${currentResponseState.confirmationType}`);

      // Usar o sistema de an√°lise de inten√ß√µes para detectar confirma√ß√µes flex√≠veis
      const isPositiveConfirmation = userIntent.mainIntent === INTENTIONS.CONFIRMATION && userIntent.confidence >= 0.8;
      const isNegativeResponse = userIntent.mainIntent === INTENTIONS.REJECTION && userIntent.confidence >= 0.8;

      if (currentResponseState.confirmationType === 'schedule_create') {
        if (isPositiveConfirmation || userConfirmation === 'sim') {
          try {
            const eventDetailsToCreate = currentResponseState.eventDetails;
            if (!eventDetailsToCreate || !eventDetailsToCreate.extractedDate || !eventDetailsToCreate.extractedTime) {
                throw new Error('Detalhes do evento ausentes no estado de confirma√ß√£o para cria√ß√£o.');
            }
            await sendMessage(senderId, `Confirmado! Vou criar seu agendamento... üóìÔ∏è`);
            const { extractedDate, extractedTime, ...cleanedEventDetails } = eventDetailsToCreate;
            const createdEvent = await createEvent(cleanedEventDetails);
            
            const humanReadableDate = formatDateHumanReadable(extractedDate);
            const successMessage = `Agendamento confirmado!ü§† Seu ensaio fotogr√°fico foi marcado para ${humanReadableDate} √†s ${extractedTime}.`;
            await sendMessage(senderId, successMessage);
          } catch (error) {
            console.error('[Agendamento] Erro ao criar evento ap√≥s confirma√ß√£o:', error);
            await sendMessage(senderId, `üò• Desculpe, ocorreu um erro ao criar seu agendamento ap√≥s a confirma√ß√£o. Por favor, tente reagendar ou entre em contato.`);
          } finally {
            clearResponseState(senderId);
          }
        } else if (isNegativeResponse || userConfirmation === 'n√£o' || userConfirmation === 'nao') {
          await sendMessage(senderId, "Ok, o agendamento n√£o foi criado. Se precisar de algo mais, √© s√≥ chamar! üëç");
          clearResponseState(senderId);
        } else {
          await sendMessage(senderId, "N√£o entendi sua resposta. Por favor, responda com uma confirma√ß√£o positiva como 'sim', 'beleza', 'confirmo' para confirmar o agendamento ou 'n√£o' para cancelar.");
        }
      } else if (currentResponseState.confirmationType === 'schedule_modify') {
        if (isPositiveConfirmation || userConfirmation === 'sim') {
          try {
            const modDetails = currentResponseState.eventDetails;
            if (!modDetails || !modDetails.eventId || !modDetails.updatedEventData || !modDetails.newDate || !modDetails.newTime) {
              throw new Error('Detalhes da modifica√ß√£o ausentes no estado de confirma√ß√£o.');
            }
            await sendMessage(senderId, `Confirmado! Vou remarcar seu ensaio... üõ†Ô∏è`);
            await updateEvent(modDetails.eventId, modDetails.updatedEventData);
            
            const humanReadableNewDate = formatDateHumanReadable(modDetails.newDate);
            const successMessage = `Ensaio remarcado para ${humanReadableNewDate} √†s ${modDetails.newTime}.`;
            await sendMessage(senderId, successMessage);
          } catch (error) {
            console.error('[Agendamento] Erro ao modificar evento ap√≥s confirma√ß√£o:', error);
            await sendMessage(senderId, `üò• Desculpe, ocorreu um erro ao tentar remarcar seu ensaio. Por favor, tente novamente.`);
          } finally {
            clearResponseState(senderId);
          }
        } else if (isNegativeResponse || userConfirmation === 'n√£o' || userConfirmation === 'nao') {
          await sendMessage(senderId, "Ok, o agendamento n√£o foi remarcado. Permanece como estava. üòâ");
          clearResponseState(senderId);
        } else {
          await sendMessage(senderId, "N√£o entendi sua resposta. Por favor, responda com uma confirma√ß√£o positiva como 'sim', 'beleza', 'confirmo' para confirmar a remarca√ß√£o ou 'n√£o' para manter o agendamento original.");
        }
      } else if (currentResponseState.confirmationType === 'schedule_cancel') {
        if (isPositiveConfirmation || userConfirmation === 'sim') {
          try {
            const cancelDetails = currentResponseState.eventDetails;
            if (!cancelDetails || !cancelDetails.eventId || !cancelDetails.cancelDate || !cancelDetails.cancelTime) {
              throw new Error('Detalhes do cancelamento ausentes no estado de confirma√ß√£o.');
            }
            await sendMessage(senderId, `Confirmado! Vou cancelar seu agendamento... üóëÔ∏è`);
            await deleteEvent(cancelDetails.eventId);
            
            const humanReadableDate = formatDateHumanReadable(cancelDetails.cancelDate);
            const successMessage = `Agendamento de ${humanReadableDate} √†s ${cancelDetails.cancelTime} cancelado com sucesso!`;
            await sendMessage(senderId, successMessage);
          } catch (error) {
            console.error('[Agendamento] Erro ao cancelar evento ap√≥s confirma√ß√£o:', error);
            await sendMessage(senderId, `üò• Desculpe, ocorreu um erro ao tentar cancelar seu agendamento. Por favor, tente novamente.`);
          } finally {
            clearResponseState(senderId);
          }
        } else if (isNegativeResponse || userConfirmation === 'n√£o' || userConfirmation === 'nao') {
          await sendMessage(senderId, "Ok, o agendamento n√£o foi cancelado. Continua marcado! üëç");
          clearResponseState(senderId);
        } else {
          await sendMessage(senderId, "N√£o entendi sua resposta. Por favor, responda com uma confirma√ß√£o positiva como 'sim', 'beleza', 'confirmo' para confirmar o cancelamento ou 'n√£o' para mant√™-lo.");
        }
      } else { // L√≥gica original para interrup√ß√£o de resposta longa (confirma√ß√£o de continua√ß√£o)
        if (isPositiveConfirmation || userConfirmation === 'sim') {
          currentResponseState.isPaused = false;
          currentResponseState.isWaitingForConfirmation = false;
          currentResponseState.lastInteraction = Date.now();
          setResponseState(senderId, currentResponseState);
          await sendMessage(senderId, "Ok, continuando a resposta anterior...");
          sendNextMessagePart(senderId);
        } else if (isNegativeResponse || userConfirmation === 'n√£o' || userConfirmation === 'nao') {
          await sendMessage(senderId, "Ok, descartei a resposta anterior. Pode me perguntar outra coisa se desejar.");
          clearResponseState(senderId);
        } else {
          await sendMessage(senderId, "N√£o entendi sua confirma√ß√£o. Responda com uma confirma√ß√£o positiva como 'sim', 'beleza', 'ok' para continuar ou 'n√£o' para parar.");
          clearResponseState(senderId);
          queueMessage(senderId, message);
        }
      }
      
      // Se a mensagem foi uma confirma√ß√£o (sim/n√£o) E o estado foi limpo ou a resposta continuada,
      // configura um novo timer de delay. Se a confirma√ß√£o n√£o foi entendida e o estado n√£o foi limpo,
      // n√£o inicia um novo timer aqui, pois o bot est√° aguardando uma resposta v√°lida para a pergunta anterior.
      if (userConfirmation === 'sim' || userConfirmation === 'n√£o' || userConfirmation === 'nao') {
        if (!getResponseState(senderId) || (currentResponseState && !currentResponseState.isWaitingForConfirmation)) {
            const delayForNextInteraction = calculateDelay(senderId);
            const newTimer = setTimeout(async () => {
              const queuedMessages = getQueuedMessages(senderId);
              if (queuedMessages.length > 0) {
                await processMessageBatch(queuedMessages, senderId);
              }
            }, delayForNextInteraction);
            messageStates.messageTimers.set(senderId, newTimer);
        }
        return;
      }
      // Se a confirma√ß√£o n√£o foi 'sim' ou 'n√£o' (e n√£o era para 'schedule_create' onde mantemos o estado),
      // a mensagem original foi re-enfileirada, ent√£o o fluxo normal de enfileiramento abaixo cuidar√° dela.
      
      // Se a confirma√ß√£o n√£o foi entendida mas era de agendamento ou resposta longa,
      // verifica se n√£o seria uma confirma√ß√£o de lembrete
      if (!isPositiveConfirmation && !isNegativeResponse && 
          userConfirmation !== 'sim' && userConfirmation !== 'n√£o' && userConfirmation !== 'nao') {
        
        // Verifica se a mensagem poderia ser uma confirma√ß√£o de lembrete flex√≠vel
        const isReminderConfirmation = await checkAndProcessReminderConfirmation(senderId, message.body, userIntent);
        if (isReminderConfirmation) {
          return; // A confirma√ß√£o do lembrete foi processada
        }
      }
    }


    // Se for mensagem de √°udio, processa imediatamente (sem pausa contextual por enquanto para √°udio)
    if (isAudio) {
      if (currentResponseState && currentResponseState.isPaused) {
         // Se estiver respondendo e receber um √°udio, pausa e pergunta.
        currentResponseState.isPaused = true;
        currentResponseState.isWaitingForConfirmation = true;
        setResponseState(senderId, currentResponseState);
        await sendMessage(senderId, "Recebi um √°udio seu enquanto eu respondia. Deseja que eu continue a resposta anterior ap√≥s processar este √°udio, ou paro a anterior? (Responda 'sim continuar' ou 'n√£o parar').");
        // O √°udio ser√° processado, e a resposta da confirma√ß√£o ser√° tratada na pr√≥xima mensagem de texto.
      }
      let audioPath = null;
      try {
        audioPath = await downloadAudio(message);
        const messageText = await transcribeAudio(audioPath);
        
        if (!messageText) {
          await sendMessage(senderId, 'N√£o consegui entender o √°udio. Pode tentar novamente ou enviar como texto?');
          return;
        }
        // Processa o √°udio imediatamente
        await handleSingleMessage(messageText, senderId, message); // Isso pode iniciar uma nova resposta
      } catch (error) {
        console.error('Erro ao processar √°udio:', error);
        await sendMessage(senderId, 'Ocorreu um erro ao processar o √°udio. Por favor, tente novamente.');
      } finally {
        if (audioPath && fs.existsSync(audioPath)) {
          fs.unlinkSync(audioPath);
        }
      }
      return;
    }

    // Para mensagens de texto, implementa o sistema de delay
    queueMessage(senderId, message);
    clearUserTimer(senderId);

    // Calcula o delay apropriado
    const currentDelay = calculateDelay(senderId);

    // Define novo timer para processar mensagens
    const timer = setTimeout(async () => {
      const queuedMessages = getQueuedMessages(senderId);
      if (queuedMessages.length > 0) {
        // Antes de processar o lote, verifica se uma resposta longa foi interrompida e n√£o confirmada
        const existingState = getResponseState(senderId);
        if (existingState && existingState.isWaitingForConfirmation) {
          console.log(`Timer de delay expirou, mas ${senderId} ainda n√£o confirmou a continua√ß√£o. N√£o processando novas mensagens ainda.`);
          // Re-agenda o timer para verificar novamente, ou aguarda a confirma√ß√£o.
          // Por simplicidade, vamos apenas logar e n√£o processar o lote para n√£o sobrescrever a pergunta de confirma√ß√£o.
          // O usu√°rio precisa responder √† pergunta de confirma√ß√£o.
          // Se o usu√°rio n√£o responder, as mensagens ficar√£o na fila.
          // Poder√≠amos adicionar um timeout para a confirma√ß√£o aqui.
          messageStates.messageQueues.set(senderId, queuedMessages); // Devolve as mensagens para a fila
          
                          const newTimerForConfirmation = setTimeout(async () => {
                            const stillQueuedMessages = getQueuedMessages(senderId);
                            if(getResponseState(senderId) && getResponseState(senderId).isWaitingForConfirmation){
                                console.log(`Usu√°rio ${senderId} n√£o respondeu √† confirma√ß√£o. Processando mensagens da fila.`);
                                clearResponseState(senderId); // Limpa o estado de pausa, assume que n√£o quer continuar.
                                if (stillQueuedMessages.length > 0) {
                                   await processMessageBatch(stillQueuedMessages, senderId);
                                }
                            } else if (stillQueuedMessages.length > 0) {
                                await processMessageBatch(stillQueuedMessages, senderId);
                            }
                        }, 30000); // Timeout de 30s para confirma√ß√£o
                        messageStates.messageTimers.set(senderId, newTimerForConfirmation);

        } else {
          await processMessageBatch(queuedMessages, senderId);
        }
      }
    }, currentDelay);

    messageStates.messageTimers.set(senderId, timer);

  } catch (error) {
    console.error('Erro no processamento da mensagem:', error);
    await sendMessage(message.from, 'Desculpe, ocorreu um erro ao processar sua mensagem. Por favor, tente novamente mais tarde.');
  }
}

/**
 * Manipula o evento de usu√°rio digitando para resetar o timer de delay.
 * @param {string} senderId - ID do remetente.
 */
async function handleUserIsTyping(senderId) {
  console.log(`üîÑ User ${senderId} is typing, resetting delay timer...`);
  clearUserTimer(senderId); // Limpa o timer existente

  // Calcula um novo delay (deve ser menor devido ao estado de digita√ß√£o)
  const newDelay = calculateDelay(senderId);

  // Define um novo timer para processar a fila de mensagens
  const newTimer = setTimeout(async () => {
    const queuedMessages = getQueuedMessages(senderId);
    if (queuedMessages.length > 0) {
      console.log(`‚è≥ Processing queued messages for ${senderId} after typing event.`);
      await processMessageBatch(queuedMessages, senderId);
    }
  }, newDelay);

  messageStates.messageTimers.set(senderId, newTimer);
}

// Fun√ß√µes auxiliares existentes
function splitMessage(text, maxLen = 300) {
  // Primeiro, divide por par√°grafos (linhas duplas)
  const paragraphs = text.split('\n\n');
  const parts = [];
  let currentPart = '';

  for (const paragraph of paragraphs) {
    // Se o par√°grafo j√° √© maior que o m√°ximo, divide por pontua√ß√£o
    if (paragraph.length > maxLen) {
      const sentences = paragraph.split(/([.!?]+\s+)/);
      let currentSentenceGroup = '';

      for (let i = 0; i < sentences.length; i++) {
        const sentence = sentences[i];
        if ((currentSentenceGroup + sentence).length > maxLen) {
          if (currentSentenceGroup) parts.push(currentSentenceGroup.trim());
          currentSentenceGroup = sentence;
        } else {
          currentSentenceGroup += sentence;
        }
      }
      if (currentSentenceGroup) parts.push(currentSentenceGroup.trim());
    }
    // Se o par√°grafo √© menor que o m√°ximo, tenta adicionar ao grupo atual
    else {
      if ((currentPart + '\n\n' + paragraph).length > maxLen) {
        parts.push(currentPart.trim());
        currentPart = paragraph;
      } else {
        currentPart = currentPart ? currentPart + '\n\n' + paragraph : paragraph;
      }
    }
  }

  if (currentPart) parts.push(currentPart.trim());
  return parts;
}

/**
 * Verifica e processa confirma√ß√µes de lembretes
 */
async function checkAndProcessReminderConfirmation(senderId, messageText, userIntent) {
  try {
    // Verifica se h√° confirma√ß√£o pendente para este usu√°rio
    if (!hasPendingConfirmation(senderId)) {
      return false;
    }

    console.log(`[Reminder] Analisando confirma√ß√£o do usu√°rio ${senderId}: "${messageText}"`);
    
    // Usa a OpenAI para analisar a confirma√ß√£o
    const aiAnalysis = await analyzeConfirmationWithAI(messageText);
    console.log(`[Reminder] An√°lise da OpenAI: ${aiAnalysis.mainIntent} (confian√ßa: ${aiAnalysis.confidence}) - ${aiAnalysis.reasoning}`);
    
    // Processa confirma√ß√£o positiva
    if (aiAnalysis.mainIntent === INTENTIONS.CONFIRMATION && aiAnalysis.confidence >= 0.7) {
      const processed = processReminderConfirmation(senderId, true);
      if (processed) {
        const confirmationResponses = [
          "Perfeito! Obrigado por confirmar. Estamos ansiosos para receb√™-lo! üì∏‚ú®",
          "√ìtimo! Confirma√ß√£o recebida. At√© breve! üòä",
          "Maravilha! Sua presen√ßa est√° confirmada. Nos vemos em breve! üéâ",
          "Excelente! Obrigado pela confirma√ß√£o. Ser√° um prazer receb√™-lo! üì∑"
        ];
        
        const randomResponse = confirmationResponses[Math.floor(Math.random() * confirmationResponses.length)];
        await sendMessage(senderId, randomResponse);
        return true;
      }
    } 
    // Processa confirma√ß√£o negativa
    else if (aiAnalysis.mainIntent === INTENTIONS.REJECTION && aiAnalysis.confidence >= 0.7) {
      const processed = processReminderConfirmation(senderId, false);
      if (processed) {
        await sendMessage(senderId, "Entendi, obrigado por me avisar. Caso precise remarcar, √© s√≥ me chamar! üòä");
        return true;
      }
    }
    // Se n√£o for claro, pede esclarecimento
    else if (aiAnalysis.mainIntent === INTENTIONS.CONFUSION || aiAnalysis.confidence < 0.7) {
      console.log(`[Reminder] Resposta n√£o clara, pedindo esclarecimento. An√°lise: ${aiAnalysis.reasoning}`);
      await sendMessage(senderId, "N√£o entendi se voc√™ est√° confirmando ou cancelando sua presen√ßa no ensaio. Pode responder com 'sim' para confirmar ou 'n√£o' para cancelar? üòä");
      return true; // Retorna true para n√£o processar a mensagem como conversa normal
    }

    return false;
  } catch (error) {
    console.error('[Reminder] Erro ao processar confirma√ß√£o de lembrete:', error);
    
    // Em caso de erro da OpenAI, usa an√°lise b√°sica como fallback
    if (userIntent.mainIntent === INTENTIONS.CONFIRMATION && userIntent.confidence >= 0.8) {
      const processed = processReminderConfirmation(senderId, true);
      if (processed) {
        await sendMessage(senderId, "Perfeito! Obrigado por confirmar. Estamos ansiosos para receb√™-lo! üì∏‚ú®");
        return true;
      }
    } else if (userIntent.mainIntent === INTENTIONS.REJECTION && userIntent.confidence >= 0.8) {
      const processed = processReminderConfirmation(senderId, false);
      if (processed) {
        await sendMessage(senderId, "Entendi, obrigado por me avisar. Caso precise remarcar, √© s√≥ me chamar! üòä");
        return true;
      }
    }
    
    return false;
  }
}

module.exports = {
  messageHandler,
  handleUserIsTyping, // Exported new function
};
